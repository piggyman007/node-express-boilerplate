#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();

const http = require('http');
const { createTerminus } = require('@godaddy/terminus');
const app = require('../app');
const config = require('../config');
const logger = require('../libs/logger')(config.logger);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

function onSignal() {
  logger.info('server is starting cleanup');
  return Promise.all([
    // your clean logic, like closing database connections
  ]);
}

function onShutdown() {
  logger.info('cleanup finished, server is shutting down');
}

function healthCheck() {
  const d = new Date();
  return Promise.resolve(d);
}

const options = {
  // healtcheck options
  healthChecks: {
    '/healthcheck': healthCheck
  },

  // cleanup options
  timeout: config.shutdownTimeout,
  onSignal,
  onShutdown
};

createTerminus(server, options);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.fatal(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.fatal(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.info(`listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
